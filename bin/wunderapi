#!/usr/bin/env node

var WunderAPI = require('wunderapi')
  , vows = require('vows')

var params = process.argv.slice(2)
var options = { serial: true }

var usageMessage =
    "\n    wunderapi [-vah] http://api.server:port/root file1 [file2 [...]]" +
    "\n      -v         Show version number" +
    "\n      -a         Show all results, not just errors" +
    "\n      -h         Show this help"

while (params[0] && params[0][0] && params[0][0] == '-') { // option flag
    for (var opt = params.shift(); opt = opt.slice(1); ) {
        switch (opt[0]) {
            case 'v':
                console.log(WunderAPI.getVersion())
                break
            case 'p':
                options.serial = false
                break
            case 's':
                options.serial = true
                break
            case 'h':
                usage()
                break
            case 'a':
                options.reporter = require('vows/lib/vows/reporters/spec')
                break
            default:
                console.log("Unrecognized option: -" + opt[0])
        }
    }
}

if (options.serial == false) {
    console.log("Unfortunately, due to the ways vows work, tests *must* be run serially for now.")
    options.serial = true
}

function usage() {
    console.log(usageMessage)
    usageMessage = "\n\nPlease specify some options"
}

if (params.length < 2) {
    usage()
    process.exit()
}

options.root = params.shift()
vowsoptions = {}
if (options.reporter) vowsoptions.reporter = options.reporter
var running = 0
var results = {
    honored: 0,
    broken:  0,
    errored: 0,
    pending: 0,
    total:   0,
    time:    0
};

function runNext() {
    var api = new WunderAPI(options.root)
    if (params.length < 1) {
        checkIfDone()
        return
    }
    running++

    vows.reporter.reset();
    
    api.compileFile(params.shift(), function(err, suite) {
        if (err) throw(err)

        if (options.serial) {
            suite.run(vowsoptions, function(result) {
                running--
                Object.keys(result).forEach(function (k) {
                    results[k] += result[k]
                })
                runNext()
                checkIfDone()
            })
        } else {
            suite.run(vowsoptions, function(result) {
                running--
                Object.keys(result).forEach(function (k) {
                    results[k] += result[k]
                })
                checkIfDone()
            })
            runNext()
        }
    })
}

function checkIfDone() {
    if (running <= 0) {
        var status = 0
        if (results.broken) status += 1
        if (results.errored) status += 2
        process.exit(status)
    }
}

runNext() 

